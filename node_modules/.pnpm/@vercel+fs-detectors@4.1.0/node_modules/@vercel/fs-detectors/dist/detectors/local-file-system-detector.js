"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalFileSystemDetector = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = require("path");
const filesystem_1 = require("./filesystem");
const error_utils_1 = require("@vercel/error-utils");
class LocalFileSystemDetector extends filesystem_1.DetectorFilesystem {
    constructor(rootPath) {
        super();
        this.rootPath = rootPath;
    }
    async _hasPath(name) {
        try {
            await promises_1.default.stat(this.getFilePath(name));
            return true;
        }
        catch (err) {
            if ((0, error_utils_1.isErrnoException)(err) && err.code === 'ENOENT') {
                return false;
            }
            throw err;
        }
    }
    _readFile(name) {
        return promises_1.default.readFile(this.getFilePath(name));
    }
    async _isFile(name) {
        const stat = await promises_1.default.stat(this.getFilePath(name));
        return stat.isFile();
    }
    async _readdir(dir) {
        const dirPath = this.getFilePath(dir);
        const files = await promises_1.default.readdir(dirPath);
        return Promise.all(files.map(async (name) => {
            const absPath = (0, path_1.join)(this.rootPath, dir, name);
            const path = (0, path_1.join)(this.getRelativeFilePath(dir), name);
            const stat = await promises_1.default.stat(absPath);
            let type;
            if (stat.isFile()) {
                type = 'file';
            }
            else if (stat.isDirectory()) {
                type = 'dir';
            }
            else {
                throw new Error(`Dirent was neither file nor directory: ${path}`);
            }
            return { name, path, type };
        }));
    }
    _chdir(name) {
        return new LocalFileSystemDetector(this.getFilePath(name));
    }
    getRelativeFilePath(name) {
        return name.startsWith(this.rootPath)
            ? (0, path_1.relative)(this.rootPath, name)
            : name;
    }
    getFilePath(name) {
        return (0, path_1.join)(this.rootPath, this.getRelativeFilePath(name));
    }
}
exports.LocalFileSystemDetector = LocalFileSystemDetector;
//# sourceMappingURL=local-file-system-detector.js.map